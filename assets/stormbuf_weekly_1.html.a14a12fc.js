import{r as l,o as e,c as o,a as n,d as c,F as r,f as a,b as s}from"./app.edc637f8.js";import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";const i={},D=a('<h1 id="stormbuf-\u5468\u520A-1-github-copilot-\u4F7F\u7528\u521D\u4F53\u9A8C" tabindex="-1"><a class="header-anchor" href="#stormbuf-\u5468\u520A-1-github-copilot-\u4F7F\u7528\u521D\u4F53\u9A8C" aria-hidden="true">#</a> stormbuf \u5468\u520A ( 1 ) \uFF1AGithub Copilot \u4F7F\u7528\u521D\u4F53\u9A8C</h1><h2 id="github-copilot-\u4F7F\u7528\u521D\u4F53\u9A8C" tabindex="-1"><a class="header-anchor" href="#github-copilot-\u4F7F\u7528\u521D\u4F53\u9A8C" aria-hidden="true">#</a> Github Copilot \u4F7F\u7528\u521D\u4F53\u9A8C</h2><p>28 \u53F7\u65E9\u4E0A\u8D77\u5E8A\u4E60\u60EF\u6027\u5237\u4E86\u4E0B\u90AE\u7BB1\uFF0C\u6CA1\u60F3\u5230\u6536\u5230\u4E86 GitHub \u7ED9\u7684\u300C\u65B0\u5E74\u793C\u7269\u300D\u2014 GitHub Copilot\u3002</p><p>\u76EE\u524D copilot \u4EE5\u63D2\u4EF6\u7684\u5F62\u5F0F\u652F\u6301\u4E09\u6B3E\u7F16\u8F91\u5668/IDE\uFF1A</p><ol><li>vscode</li><li>jetbrains</li><li>neovim</li></ol><p>copilot \u53EF\u4EE5\u901A\u8FC7\u5173\u952E\u8BCD\u3001\u6CE8\u91CA\uFF0C\u8054\u7CFB\u4E0A\u4E0B\u6587\u63D0\u4F9B\u4E00\u4E9B\u4EE3\u7801\u6BB5\u5EFA\u8BAE\uFF0C\u51C6\u786E\u7387\u53EF\u4EE5\u8BF4\u9AD8\u7684\u79BB\u8C31\u3002</p>',6),y=s("\u5177\u4F53\u7684\u4F7F\u7528\u53EF\u4EE5\u53C2\u8003 "),b={href:"https://github.com/github/copilot-docs",target:"_blank",rel:"noopener noreferrer"},m=s("copilot-docs"),u=s(" \u3002"),F=a(`<p>Golang \u4E2D\u6CA1\u6709\u5E76\u53D1\u5B89\u5168\u7684 map\uFF0C\u901A\u5E38\u90FD\u8981\u624B\u52A8\u5B9E\u73B0\u6216\u5F15\u5165\u7B2C\u4E09\u65B9\u5E93\u3002</p><p>\u4E0B\u9762\u662F\u901A\u8FC7 copilot \u5B9E\u73B0\u7684\u5E76\u53D1\u5B89\u5168\u7684 map\uFF0C\u5168\u90E8\u4EE3\u7801\u53EA\u952E\u5165\u4E86 <code>Tab</code>\u3001<code>Alt</code>+<code>]/[</code> \u3001<code>func</code>\u3001<code>type</code> \u548C\u4E00\u884C\u6CE8\u91CA\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// ConcurrentMap is a thread-safe map.</span></span>
<span class="line"><span style="color:#FF7B72;">type</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ConcurrentMap</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">struct</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  sync.RWMutex</span></span>
<span class="line"><span style="color:#C9D1D9;">  items </span><span style="color:#FF7B72;">map</span><span style="color:#C9D1D9;"> [</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{}]</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{}</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> New ( ) </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;">ConcurrentMap{items: make ( </span><span style="color:#FF7B72;">map</span><span style="color:#C9D1D9;"> [</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{}]</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} )}</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Set ( key </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{}, value </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} ) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.Lock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.items [key] </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> value</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.Unlock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Get ( key </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} ) </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} {</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.RLock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  v </span><span style="color:#FF7B72;">:=</span><span style="color:#C9D1D9;"> m.items [key]</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.RUnlock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> v</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Remove ( key </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} ) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.Lock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  delete ( m.items, key )</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.Unlock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Items ( ) </span><span style="color:#FF7B72;">map</span><span style="color:#C9D1D9;"> [</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{}]</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> m.items</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Count ( ) </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> len ( m.items )</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Clear ( ) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.Lock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.items </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> make ( </span><span style="color:#FF7B72;">map</span><span style="color:#C9D1D9;"> [</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{}]</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} )</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.Unlock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) IsEmpty ( ) </span><span style="color:#FF7B72;">bool</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> len ( m.items ) </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">func</span><span style="color:#C9D1D9;"> ( m </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">ConcurrentMap ) Contains ( key </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;">{} ) </span><span style="color:#FF7B72;">bool</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.RLock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  _, ok </span><span style="color:#FF7B72;">:=</span><span style="color:#C9D1D9;"> m.items [key]</span></span>
<span class="line"><span style="color:#C9D1D9;">  m.RUnlock ( )</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ok</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>\u4F7F\u7528\u8FC7\u7A0B\u4E2D\uFF0C\u53D1\u73B0 copilot \u4E0D\u4EC5\u4EC5\u80FD\u751F\u6210\u4EE3\u7801\uFF0C\u8FD8\u80FD\u751F\u6210\u6587\u672C\u3002\u6BD4\u5982\u4E0A\u8FF0\u7684\u6CE8\u91CA\u91CC\uFF0C\u6211\u53EA\u952E\u5165\u4E86 <code>// ConcurrentMap</code> \uFF0C\u5176\u4F59\u662F\u901A\u8FC7 copilot \u7684\u5EFA\u8BAE\u8865\u5168\u3002</p>`,4);function C(B,d){const p=l("ExternalLinkIcon");return e(),o(r,null,[D,n("p",null,[y,n("a",b,[m,c(p)]),u]),F],64)}var k=t(i,[["render",C]]);export{k as default};
