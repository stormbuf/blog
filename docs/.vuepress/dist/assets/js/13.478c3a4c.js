(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{450:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"aqs源码解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs源码解析"}},[t._v("#")]),t._v(" AQS源码解析")]),t._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("AQS 的全称为（AbstractQueuedSynchronizer），一个抽象类。AQS 是一个用来构建锁和同步器的框架，通过 AQS 能高效的构造出同步器。")]),t._v(" "),a("p",[t._v("作为用于构建锁和同步器的框架，AQS 为此提供了线程阻塞/唤醒、线程排队、获取资源失败处理等一系列公用的复杂实现，而使用者仅需要定义如何获取资源和如何释放资源的这些简单的操作。（设计模式——模板方法的应用）")]),t._v(" "),a("p",[t._v("AQS 的实现思路：当线程请求资源时，若资源空闲，则锁定资源，并将线程设为工作线程；若资源被占用，则将线程放入等待队列，后续排队获取资源，并为此提供了线程阻塞/唤醒和被唤醒线程锁分配的机制。")]),t._v(" "),a("p",[t._v("AQS 提供了两种同步方式：")]),t._v(" "),a("ul",[a("li",[t._v("共享式")]),t._v(" "),a("li",[t._v("独占式")])]),t._v(" "),a("p",[t._v("使用 AQS 方式一般是根据选择的同步方式，重写以下部分或全部方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//独占式尝试获取独占资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//独占式尝试释放独占资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//共享式尝试获取共享资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquireShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//共享式尝试释放共享资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryReleaseShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//资源是否被当前线程独占")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isHeldExclusively")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/stormbuf/blog/main/img/20210723121905.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/stormbuf/blog/main/img/20210723121938.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用实例"}},[t._v("#")]),t._v(" 应用实例")]),t._v(" "),a("p",[t._v("JDK 中的应用：")]),t._v(" "),a("ul",[a("li",[t._v("ReentrantLock")]),t._v(" "),a("li",[t._v("ReentrantReadWriteLock")]),t._v(" "),a("li",[t._v("Semaphore")]),t._v(" "),a("li",[t._v("CountDownLatch")])]),t._v(" "),a("h2",{attrs:{id:"主要组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要组成"}},[t._v("#")]),t._v(" 主要组成")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/stormbuf/blog/main/img/CLH.png",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("state")])]),t._v(" "),a("p",[t._v("AQS 中的资源，一般称为同步状态。")]),t._v(" "),a("p",[a("strong",[t._v("CLH")])]),t._v(" "),a("p",[t._v("CLH队列，是一个链表实现的双向队列，用以作为 AQS 中的等待队列。队列中的结点是 AQS 的内部类 "),a("code",[t._v("Node")]),t._v(" ，一个节点表示一个线程。")]),t._v(" "),a("p",[a("strong",[t._v("ConditionObject")])]),t._v(" "),a("p",[t._v("用于实现条件队列。")]),t._v(" "),a("h2",{attrs:{id:"整体框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体框架"}},[t._v("#")]),t._v(" 整体框架")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/stormbuf/blog/main/img/20210723120337.png",alt:"img"}})]),t._v(" "),a("h1",{attrs:{id:"node-waitstatus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-waitstatus"}},[t._v("#")]),t._v(" Node waitStatus")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("枚举")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("当一个Node被初始化的时候的默认值")])]),t._v(" "),a("tr",[a("td",[t._v("CANCELLED")]),t._v(" "),a("td",[t._v("为1，表示线程获取锁的请求已经取消了")])]),t._v(" "),a("tr",[a("td",[t._v("CONDITION")]),t._v(" "),a("td",[t._v("为-2，表示节点在等待队列中，节点线程等待唤醒")])]),t._v(" "),a("tr",[a("td",[t._v("PROPAGATE")]),t._v(" "),a("td",[t._v("为-3，当前线程处在SHARED情况下，该字段才会使用")])]),t._v(" "),a("tr",[a("td",[t._v("SIGNAL")]),t._v(" "),a("td",[t._v("为-1，表示线程已经准备好了，就等资源释放了")])])])]),t._v(" "),a("h1",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("同步工具")]),t._v(" "),a("th",[t._v("同步工具与AQS的关联")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ReentrantLock")]),t._v(" "),a("td",[t._v("使用AQS保存锁重复持有的次数。当一个线程获取锁时，ReentrantLock记录当前获得锁的线程标识，用于检测是否重复获取，以及错误线程试图解锁操作时异常情况的处理。")])]),t._v(" "),a("tr",[a("td",[t._v("Semaphore")]),t._v(" "),a("td",[t._v("使用AQS同步状态来保存信号量的当前计数。tryRelease会增加计数，acquireShared会减少计数。")])]),t._v(" "),a("tr",[a("td",[t._v("CountDownLatch")]),t._v(" "),a("td",[t._v("使用AQS同步状态来表示计数。计数为0时，所有的Acquire操作（CountDownLatch的await方法）才可以通过。")])]),t._v(" "),a("tr",[a("td",[t._v("ReentrantReadWriteLock")]),t._v(" "),a("td",[t._v("使用AQS同步状态中的16位保存写锁持有的次数，剩下的16位用于保存读锁的持有次数。")])]),t._v(" "),a("tr",[a("td",[t._v("ThreadPoolExecutor")]),t._v(" "),a("td",[t._v("Worker利用AQS同步状态实现对独占线程变量的设置（tryAcquire和tryRelease）。")])])])]),t._v(" "),a("h1",{attrs:{id:"条件队列condition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件队列condition"}},[t._v("#")]),t._v(" 条件队列Condition")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.stormbuf.top/20210723151704.png",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ========== 阻塞 ==========")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 造成当前线程在接到信号或被中断之前一直处于等待状态,调用的时候会将当前node释放锁或从CLH队列中移除。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 造成当前线程在接到信号之前一直处于等待状态。【注意：该方法对中断不敏感】。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitUninterruptibly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回值表示剩余时间，如果在`nanosTimeout` 之前唤醒，那么返回值 `= nanosTimeout - 消耗时间` ，如果返回值 `<= 0` ,则可以认定它已经超时了。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitNanos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" nanosTimeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有到指定时间就被通知，则返回 true ，否则表示到了指定时间，返回返回 false 。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 造成当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有到指定时间就被通知，则返回 true ，否则表示到了指定时间，返回返回 false 。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitUntil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" deadline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ========== 唤醒 ==========")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 唤醒一个等待线程。该线程从等待方法返回前必须获得与Condition相关的锁。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 唤醒所有等待线程。能够从等待方法返回的线程必须获得与Condition相关的锁。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);