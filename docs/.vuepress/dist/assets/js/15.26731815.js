(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{452:function(a,e,r){"use strict";r.r(e);var t=r(33),o=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"mybatis-springboot源码解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-springboot源码解析"}},[a._v("#")]),a._v(" Mybatis-SpringBoot源码解析")]),a._v(" "),r("h1",{attrs:{id:"关键类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键类"}},[a._v("#")]),a._v(" 关键类")]),a._v(" "),r("h2",{attrs:{id:"mybatisproperties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatisproperties"}},[a._v("#")]),a._v(" MybatisProperties")]),a._v(" "),r("p",[r("code",[a._v("org.mybatis.spring.boot.autoconfigure.MybatisProperties")])]),a._v(" "),r("p",[a._v("MyBatis 的配置类，通过 Spring Boot 中的 "),r("code",[a._v("@ConfigurationProperties")]),a._v(" 注解，注入 MyBatis 的相关配置")]),a._v(" "),r("p",[a._v("这里注意到仅添加了 @ConfigurationProperties 注解，在作为 Spring Bean 注入到 Spring 容器中时，会将相关配置注入到属性中，但是这个注解不会将该类作为 Spring Bean 进行注入，需要结合 @Configuration 注解或者其他注解一起使用")]),a._v(" "),r("h2",{attrs:{id:"mybatisautoconfiguration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatisautoconfiguration"}},[a._v("#")]),a._v(" MybatisAutoConfiguration")]),a._v(" "),r("p",[r("code",[a._v("org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration")])]),a._v(" "),r("p",[a._v("实现 InitializingBean 接口，MyBatis 自动配置类，用于初始化 MyBatis，核心类")]),a._v(" "),r("p",[a._v("类上面定义的几个注解：")]),a._v(" "),r("ul",[r("li",[r("p",[r("code",[a._v("@Configuration")]),a._v("：可以当作一个 Spring Bean 注入到 Spring 上下文中")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })")]),a._v("保证存在 value 中所有的 Class 对象，以确保可以创建它们的实例对象，这里就保证 SqlSessionFactory 和 SqlSessionFactoryBean 都能够被创建")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("@ConditionalOnSingleCandidate(DataSource.class)")]),a._v("保证存在 value 类型对应的 Bean，这里确保已经存在一个 DataSource 数据源对象")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("@EnableConfigurationProperties(MybatisProperties.class)")]),a._v("注入 value 中所有的类型的 Bean，这里会让 MybatisProperties 作为 Spring Bean 注入到 Spring 上下文中")])])]),a._v(" "),r("h2",{attrs:{id:"sqlsessiontemplate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessiontemplate"}},[a._v("#")]),a._v(" SqlSessionTemplate")]),a._v(" "),r("p",[r("code",[a._v("org.mybatis.spring.SqlSessionTemplate")]),a._v("：实现 SqlSession 和 DisposableBean 接口，SqlSession 操作模板实现类\n实际上，代码实现和 "),r("code",[a._v("org.apache.ibatis.session.SqlSessionManager")]),a._v(" 相似，承担 SqlSessionFactory 和 SqlSession 的职责")]),a._v(" "),r("h3",{attrs:{id:"sqlsessioninterceptor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessioninterceptor"}},[a._v("#")]),a._v(" SqlSessionInterceptor")]),a._v(" "),r("p",[a._v("SqlSessionTemplate的内部类，实现了 InvocationHandler 接口，作为"),r("code",[a._v("sqlSessionProxy")]),a._v("动态代理对象的代理类，对 SqlSession 的相关方法进行增强")]),a._v(" "),r("h2",{attrs:{id:"mapperfactorybean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mapperfactorybean"}},[a._v("#")]),a._v(" MapperFactoryBean")]),a._v(" "),r("p",[a._v("扫描 Mapper 接口时生成的"),r("code",[a._v("BeanDefinition")]),a._v("对象，通过这个对象，spring生成bean的过程完成了"),r("strong",[a._v("Mapper 动态代理对象的创建")]),a._v("。")]),a._v(" "),r("h3",{attrs:{id:"创建mappedstatement"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建mappedstatement"}},[a._v("#")]),a._v(" 创建MappedStatement")]),a._v(" "),r("p",[r("code",[a._v("MapperFactoryBean")]),a._v("的父类"),r("code",[a._v("DaoSupport")]),a._v("中实现了"),r("code",[a._v("InitializingBean")]),a._v("接口，在创建bean，初始化时会调用"),r("code",[a._v("checkDaoConfig")]),a._v("方法来生成"),r("code",[a._v("MappedStatement")]),a._v("放在全局配置类"),r("code",[a._v("Configuration")]),a._v("中。")]),a._v(" "),r("h3",{attrs:{id:"创建mapper代理类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建mapper代理类"}},[a._v("#")]),a._v(" 创建Mapper代理类")]),a._v(" "),r("p",[r("code",[a._v("MapperFactoryBean")]),a._v("实现了"),r("code",[a._v("FactoryBean")]),a._v("接口，在spring框架初始化时，会通过"),r("code",[a._v("FactoryBean#getObject")]),a._v("生成并获取Mapper接口的代理对象。")]),a._v(" "),r("p",[r("code",[a._v("getObject")]),a._v("通过getSqlSession 方法获取父类"),r("code",[a._v("SqlSessionDaoSupport")]),a._v("中的"),r("code",[a._v("sqlSessionTemplate")]),a._v("，通过sqlSession生成并获取Mapper接口的代理对象。")]),a._v(" "),r("h1",{attrs:{id:"mapperscan注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mapperscan注解"}},[a._v("#")]),a._v(" @MapperScan注解")]),a._v(" "),r("p",[a._v("Spring boot中，配置了"),r("code",[a._v("@Mapper")]),a._v("注解的Mapper接口才会被解析，一般有四个路径：")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("配置 "),r("code",[a._v("MapperScannerConfigurer")]),a._v(" 扫描器类型的 Spring Bean")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("@MapperScan")]),a._v("注解")])]),a._v(" "),r("li",[r("p",[r("code",[a._v("<mybatis:scan />")]),a._v("标签")])]),a._v(" "),r("li",[r("p",[a._v("若没有配置上面三种方式则通过"),r("code",[a._v("AutoConfiguredMapperScannerRegistrar")]),a._v("添加"),r("code",[a._v("MapperScannerConfigurer")]),a._v("，然后扫描Spring Boot的基础包路径去获取Mapper接口。")])])]),a._v(" "),r("p",[r("code",[a._v("org.mybatis.spring.annotation.MapperScannerRegistrar")]),a._v("作为"),r("code",[a._v("@MapperScan")]),a._v("的注册器。")]),a._v(" "),r("p",[r("code",[a._v("MapperScannerRegistrar")]),a._v("  实现了 "),r("code",[a._v("ImportBeanDefinitionRegistrar")]),a._v("接口，在Spring Boot创建bean时，调用方法registerBeanDefinitions创建了"),r("code",[a._v("MapperScannerConfigurer")]),a._v("对象，"),r("code",[a._v("MapperScannerConfigurer")]),a._v("使用"),r("code",[a._v("@MapperScan")]),a._v("注解信息去扫描Mapper接口。")]),a._v(" "),r("blockquote",[r("p",[r("code",[a._v("MapperScannerConfigurer")]),a._v("扫描到的所有扫描到的 Mapper 接口的 "),r("code",[a._v("BeanDefinition")]),a._v("对象（Spring Bean的前身），并将其 Bean Class 修改为 "),r("code",[a._v("MapperFactoryBean")]),a._v("，从而在 Spring 初始化该 Bean 的时候，会初始化成 "),r("code",[a._v("MapperFactoryBean")]),a._v(" 类型，"),r("strong",[a._v("实现创建 Mapper 动态代理对象")])])]),a._v(" "),r("h2",{attrs:{id:"autoconfiguredmapperscannerregistrar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#autoconfiguredmapperscannerregistrar"}},[a._v("#")]),a._v(" AutoConfiguredMapperScannerRegistrar")]),a._v(" "),r("p",[r("code",[a._v("org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.AutoConfiguredMapperScannerRegistrar")])]),a._v(" "),r("p",[a._v("是"),r("code",[a._v("MybatisAutoConfiguration")]),a._v(" 的一个内部静态类。")]),a._v(" "),r("p",[a._v("通过"),r("code",[a._v("org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.MapperScannerRegistrarNotFoundConfiguration")]),a._v("导入该bean（通过条件注解判断了不存在另外三种路径的前提）。")])])}),[],!1,null,null,null);e.default=o.exports}}]);